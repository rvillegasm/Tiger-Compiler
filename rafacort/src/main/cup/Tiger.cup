import java_cup.runtime.Symbol;

terminal NIL, INTEGER, OF, NEW, POINT, COMMA, SUB, LPAREN, RPAREN, LCOR, RCOR, PRODUCE, IF, THEN, ELSE, 
         WHILE, DO, FOR, TO, BREAK, LET, IN, END, SEMICOLON, TYPE, EQUALS, CLASS, EXTENDS, FUNCTION,
         COLON, PRIMITIVE, VAR, METHOD, ARRAY, ADD, TIMES, DIV, DIFFERENT, LESSTHAN, MORETHAN, LESSEQUAL, MOREEQUAL,
         AND, OR, IMPORT, LKEY, RKEY, ID, STRING;

non terminal Symbol program, expr, lvalue, exprs, decls, decl, vardec, classfields, classfield, ty, tyfields,
             op, idexpr, commaexpr, semiexpr, commatypeid, ifthenelse, typecor;

precedence left OR;
precedence left AND;
precedence left MORETHAN, LESSTHAN, EQUALS, LESSEQUAL, MOREEQUAL, DIFFERENT;
precedence left SUB, ADD;
precedence left TIMES, DIV;
precedence left ELSE;

start with program;

program ::= expr
        |   decls
	  |   {: RESULT = new java_cup.runtime.Symbol(TigerSymbols.EOF); :}
        ;
	
//no-terminal extendido
idexpr ::= COMMA ID EQUALS expr idexpr
       |   COMMA ID EQUALS expr
       ;
       
//no-terminal extendido
commaexpr ::=  COMMA expr commaexpr
	    |    COMMA expr
          ;

typecor ::= ID LCOR expr RCOR
        ;

expr ::= NIL
     |   INTEGER
     |   STRING
     |   typecor OF expr
     |   ID LKEY RKEY 
     |   ID LKEY ID EQUALS expr RKEY
     |   ID LKEY ID EQUALS expr idexpr RKEY
     |   NEW ID
     |   ID
     |   lvalue
     |   ID LPAREN RPAREN
     |   ID LPAREN expr RPAREN
     |   ID LPAREN expr commaexpr RPAREN
     |   ID POINT ID LPAREN RPAREN
     |   ID POINT ID LPAREN expr RPAREN
     |   ID POINT ID LPAREN expr commaexpr RPAREN
     |   lvalue POINT ID LPAREN RPAREN
     |   lvalue POINT ID LPAREN expr RPAREN
     |   lvalue POINT ID LPAREN expr commaexpr RPAREN
     |   SUB expr
     |   expr op expr
     |   LPAREN RPAREN
     |   LPAREN exprs RPAREN
     |   lvalue PRODUCE expr
     |   ID PRODUCE expr
     |   IF expr THEN expr
     |   IF expr THEN expr ifthenelse
     |   WHILE expr DO expr
     |   FOR ID PRODUCE expr TO expr DO expr
     |   BREAK
     |   LET decls IN END
     |   LET decls IN exprs END
     ;
     
// solucion else colgante

ifthenelse ::= ELSE expr
           ;

lvalue ::= ID POINT ID
       |   lvalue POINT ID
       |   ID LCOR RCOR
       |   lvalue LCOR RCOR
       |   lvalue LCOR exprs RCOR
       |   typecor
       ;

semiexpr ::= SEMICOLON expr
         |   SEMICOLON expr semiexpr
         ;

exprs ::= expr
      |   expr semiexpr
      ;

decls ::= decl
      |   decl decls
      ;

decl ::= TYPE ID EQUALS ty
     |   CLASS ID LKEY RKEY
     |   CLASS ID LKEY classfields RKEY
     |   CLASS ID EXTENDS ID LKEY RKEY
     |   CLASS ID EXTENDS ID LKEY classfields RKEY
     |   vardec
     |   FUNCTION ID LPAREN RPAREN EQUALS expr
     |   FUNCTION ID LPAREN tyfields RPAREN EQUALS expr
     |   FUNCTION ID LPAREN RPAREN COLON ID EQUALS expr
     |   FUNCTION ID LPAREN tyfields RPAREN COLON ID EQUALS expr
     |   PRIMITIVE ID LPAREN RPAREN
     |   PRIMITIVE ID LPAREN tyfields RPAREN
     |   PRIMITIVE ID LPAREN RPAREN COLON ID
     |   PRIMITIVE ID LPAREN tyfields RPAREN COLON ID
     |   IMPORT STRING
     ;

vardec ::= VAR ID PRODUCE expr
       |   VAR ID COLON ID PRODUCE expr
       ;

classfields ::= classfield
            |   classfield classfields
            ;

classfield ::= vardec
	     |   METHOD ID LPAREN RPAREN EQUALS expr
           |   METHOD ID LPAREN tyfields RPAREN EQUALS expr
	     |   METHOD ID LPAREN RPAREN COLON ID EQUALS expr
           |   METHOD ID LPAREN tyfields RPAREN COLON ID EQUALS expr
           ;

ty ::= ID
   |   LKEY RKEY
   |   LKEY tyfields RKEY
   |   ARRAY OF ID
   |   CLASS LKEY RKEY
   |   CLASS LKEY classfields RKEY
   |   CLASS EXTENDS ID LKEY RKEY
   |   CLASS EXTENDS ID LKEY classfields RKEY
   ;

//no-terminal extendido
commatypeid ::= COMMA ID COLON ID   
            |   COMMA ID COLON ID commatypeid
            ;

tyfields ::= ID COLON ID
         |   ID COLON ID commatypeid
         ;

op ::= ADD
   |   SUB
   |   TIMES
   |   DIV
   |   EQUALS
   |   DIFFERENT
   |   LESSTHAN
   |   MORETHAN
   |   LESSEQUAL
   |   MOREEQUAL
   |   AND
   |   OR
   ;