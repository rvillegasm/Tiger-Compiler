
terminal NIL, INTEGER, OF, NEW, POINT, COMMA, SUB, LPAREN, RPAREN, LCOR, RCOR, PRODUCE, IF, THEN, ELSE, 
         WHILE, DO, FOR, TO, BREAK, LET, IN, END, SEMICOLON, TYPE, EQUALS, CLASS, EXTENDS, FUNCTION,
         COLON, PRIMITIVE, VAR, METHOD, ARRAY, ADD, TIMES, DIV, DIFFERENT, LESSTHAN, MORETHAN, LESSEQUAL, MOREEQUAL,
         AND, OR, IMPORT, LKEY, RKEY, ID, STRING, TYPEID;

non terminal program, expr, lvalue, exprs, decls, decl, vardec, classfields, classfield, ty, tyfields,
             op, idexpr, commaexpr, semiexpr, commatypeid, ifthen, ifthenelse, extraExpr, extraifthenelse;

precedence left OR;
precedence left AND;
precedence left MORETHAN, LESSTHAN, EQUALS, LESSEQUAL, MOREEQUAL, DIFFERENT;
precedence left SUB, ADD;
precedence left TIMES, DIV;

start with program;

program ::= expr
        |   decls
        ;
//no-terminal extendido
idexpr ::= 
       |   COMMA ID EQUALS expr idexpr
       ;
//no-terminal extendido
commaexpr ::= 
          |   COMMA expr commaexpr
          ;

expr ::= NIL
     |   INTEGER
     |   STRING
     |   TYPEID LCOR expr RCOR OF expr
     |   TYPEID LKEY RKEY
     |   TYPEID LKEY ID EQUALS expr idexpr RKEY
     |   NEW TYPEID
     |   lvalue
     |   ID LPAREN RPAREN
     |   ID LPAREN expr commaexpr RPAREN
     |   lvalue POINT ID LPAREN RPAREN
     |   lvalue POINT ID LPAREN expr commaexpr RPAREN
     |   SUB expr
     |   expr op expr
     |   LPAREN exprs RPAREN
     |   lvalue PRODUCE expr
     |   ifthen
     |   ifthenelse
     |   WHILE expr DO expr
     |   FOR ID PRODUCE expr TO expr DO expr
     |   BREAK
     |   LET decls IN exprs END
     ;
// solucion else colgante
ifthen ::= IF expr THEN expr
       ;

ifthenelse ::= IF expr THEN extraExpr ELSE expr
           ;

extraExpr ::= extraifthenelse
          ;

extraifthenelse ::= IF expr THEN extraExpr ELSE extraExpr
                ;

lvalue ::= ID
       |   lvalue POINT ID
       |   lvalue LCOR exprs RCOR
       ;

semiexpr ::= 
         |   SEMICOLON expr semiexpr
         ;

exprs ::= 
      |   expr semiexpr
      ;

decls ::= 
      |   decl decls
      ;

decl ::= TYPE ID EQUALS ty
     |   CLASS ID LKEY classfields RKEY
     |   CLASS ID EXTENDS TYPEID LKEY classfields RKEY
     |   vardec
     |   FUNCTION ID LPAREN tyfields RPAREN EQUALS expr
     |   FUNCTION ID LPAREN tyfields RPAREN COLON TYPEID EQUALS expr
     |   PRIMITIVE ID LPAREN tyfields RPAREN
     |   PRIMITIVE ID LPAREN tyfields RPAREN COLON TYPEID
     |   IMPORT STRING
     ;

vardec ::= VAR ID PRODUCE expr
       |   VAR ID COLON TYPEID PRODUCE expr
       ;

classfields ::= 
            |   classfield classfields
            ;

classfield ::= vardec
           |   METHOD ID LPAREN tyfields RPAREN EQUALS expr
           |   METHOD ID LPAREN tyfields RPAREN COLON TYPEID EQUALS expr
           ;

ty ::= TYPEID
   |   LKEY tyfields RKEY
   |   ARRAY OF TYPEID
   |   CLASS LKEY classfields RKEY
   |   CLASS EXTENDS TYPEID LKEY classfields RKEY
   ;
//no-terminal extendido
commatypeid ::=   
            |   COMMA ID COLON TYPEID commatypeid
            ;

tyfields ::= 
         |   ID COLON TYPEID commatypeid
         ;

op ::= ADD
   |   SUB
   |   TIMES
   |   DIV
   |   EQUALS
   |   DIFFERENT
   |   LESSTHAN
   |   MORETHAN
   |   LESSEQUAL
   |   MOREEQUAL
   |   AND
   |   OR
   ;